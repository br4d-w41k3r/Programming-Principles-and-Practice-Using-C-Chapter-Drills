#include "std_lib_facilities.h"

struct Token {
	char kind;          // character for kind of Token
	double value;       // for numbers: a value
	string name;        // for variables: a name
	Token(char ch) :kind(ch), value(0) { }                  // Constructor for operator tokens
	Token(char ch, double val) :kind(ch), value(val) { }    // Constructor for number tokens
	Token(char ch, string n) :kind(ch), name(n) { }         // Constructor for variable tokens

};
//---------------------------------------------------------------------------------------------------------------
// A stream buffer to hold tokens

class Token_stream {
	bool full;
	Token buffer;
public:
	Token_stream() :full(false), buffer(0) { }            // Token stream is initially empty

	Token get();                                          // Function to get Token from Token stream
	void unget(Token t) { buffer = t; full = true; }

	void ignore(char ch);
};
//---------------------------------------------------------------------------------------------------------------

const char let = 'L';       // token for let
const char quit = 'q';      // token for quit
const char print = ';';     // token for equals
const char number = '8';    // token for a number
const char name = 'a';      // token for a name
const char square_root = 'r';      // token for sqrt()
const char power = 'p';            // token for pow(x,i)
//---------------------------------------------------------------------------------------------------------------
// A function to get token from stream buffer

Token Token_stream::get()
{
	if (full) { full = false; return buffer; }
	char ch;
	cin >> ch;
	switch (ch) {
	case '(':
	case ')':
	case '+':
	case '-':
	case '*':
	case '/':
	case '%':
	case ';':
    case ',':
	case '=':
		return Token(ch);
	case '.':
    case '0': case '1': case '2': case '3': case '4':
    case '5': case '6': case '7': case '8': case '9':
	{
            cin.unget();
            double val;
            cin >> val;
            return Token(number, val);
	}
	case 'k':
    {
        cin.unget();
        char val;
        cin >> val;
        return Token(number,1000);
    }
	default:
		if (isalpha(ch) || ch == '#') {
			string s;
			s += ch;
			while (cin.get(ch) && (isalpha(ch) || isdigit(ch) || ch == '#')) s += ch;
			cin.unget();
			if (s == "#") return Token(let);            // string to declare variables
			if (s == "exit") return Token(quit);        // string to exit program
			if (s == "sqrt") return Token(square_root); // string to take sqrt of an expression
			if (s == "pow") return Token(power);        // string to take power of an expression
			return Token(name, s);
		}
		error("Bad token");         // to catch bad tokens entered
	}
}
//---------------------------------------------------------------------------------------------------------------
// A function to ignore characters

void Token_stream::ignore(char c)
{
	if (full && c == buffer.kind) {
		full = false;
		return;
	}
	full = false;

	char ch;
	while (cin >> ch)
		if (ch == c) return;
}
//---------------------------------------------------------------------------------------------------------------
// A struct name Variable to define what a variable is

struct Variable {
	string name;
	double value;
	Variable(string n, double v) :name(n), value(v) { }
};
//---------------------------------------------------------------------------------------------------------------

vector<Variable> names;     // A vector to store variable names

//---------------------------------------------------------------------------------------------------------------
// A function to get that value of variables

double get_value(string s)
{
	for (int i = 0; i < names.size(); ++i)
		if (names[i].name == s) return names[i].value;
	error("get: undefined name ", s);
}
//---------------------------------------------------------------------------------------------------------------
// A function to set the value of variables

void set_value(string s, double d)
{
	for (int i = 0; i <= names.size(); ++i)
		if (names[i].name == s) {
			names[i].value = d;
			return;
		}
	error("set: undefined name ", s);
}
//---------------------------------------------------------------------------------------------------------------
// A function that returns true if a variable has already been declared

bool is_declared(string s)
{
	for (int i = 0; i < names.size(); ++i)
		if (names[i].name == s) return true;
	return false;
}
//---------------------------------------------------------------------------------------------------------------
// declare token stream variable

Token_stream ts;
//---------------------------------------------------------------------------------------------------------------
// call expression() for primary() to use

double expression();
//---------------------------------------------------------------------------------------------------------------
// Grammar rules
double primary()
{
	Token t = ts.get();
	switch (t.kind) {
	case '(':
	{
                 double d = expression();
                 t = ts.get();
                 if (t.kind != ')') error("')' expected");
        return d;
	}
	case '-':
		return -primary();
	case number:
		return t.value;
	case name:
		return get_value(t.name);
    case square_root:
    {
        t = ts.get();
        if(t.kind != '(') error("'(' expected");
        double d = expression();
        if (d < 0) error("cannot sqrt() negative numbers");
        t = ts.get();
        if (t.kind != ')') error("')' expected");
        return sqrt(d);
    }
    case power: 
    {
			t=ts.get();
	        if (t.kind != '(') error("'(' expected");
	        double d=expression();
	        t=ts.get();
	        if (t.kind!=',') error("',' expected");
	        double i= expression();
	        t=ts.get();
	        if (t.kind != ')') error("')' expected");
	        return pow(d,i);

    }
	default:
		error("primary expected");
	}
}

double term()
{
	double left = primary();
	while (true) {
		Token t = ts.get();
		switch (t.kind) {
		case '*':
			left *= primary();
			break;
		case '/':
		{
		    double d = primary();
                    if (d == 0) error("divide by zero");
                    left /= d;
                    break;
		}
		case '%':
       		{
            	    double d = term();
                    int i1 = int(left);
                    if(i1 != left) error("left-hand operand of % not int");
                    int i2 = int(d);
                    if(i2 != d) error("right-hand operand of % not int");
                    if(i2 == 0) error("%: divide by zero");
                    left = i1%i2;
                    break;
        	}
		default:
			ts.unget(t);
			return left;
		}
	}
}

double expression()
{
	double left = term();
	while (true) {
		Token t = ts.get();
		switch (t.kind) {
		case '+':
			left += term();
			break;
		case '-':
			left -= term();
			break;
		default:
			ts.unget(t);
			return left;
		}
	}
}

double declaration()
{
	Token t = ts.get();
	if (t.kind != 'a') error("name expected in declaration");
	string name = t.name;
	if (is_declared(name)) error(name, " declared twice");
	Token t2 = ts.get();
	if (t2.kind != '=') error("= missing in declaration of ", name);
	double d = expression();
	names.push_back(Variable(name, d));
	return d;
}

double statement()
{
	Token t = ts.get();
	switch (t.kind) {
	case let:
		return declaration();
	default:
		ts.unget(t);
		return expression();
	}
}
//---------------------------------------------------------------------------------------------------------------
// A function to keep program running after errors

void clean_up_mess()
{
	ts.ignore(print);
}
//---------------------------------------------------------------------------------------------------------------

const string prompt = "> ";
const string result = "= ";
//---------------------------------------------------------------------------------------------------------------
// A function to calculate expression

void calculate()
{
	while (true) try {
		cout << prompt;
		Token t = ts.get();
		while (t.kind == print) t = ts.get();
		if (t.kind == quit) return;
		ts.unget(t);
		cout << result << statement() << endl;
	}
	catch (runtime_error& e) {
		cerr << e.what() << endl;
		clean_up_mess();
	}
}
//---------------------------------------------------------------------------------------------------------------
// A user greeting
void greeting()
{
    cout << "Please enter your name\n";
    string name;
    cin >> name;
    cout << "Hello " << name << ", welcome to simple calculator.\n"
         << "You are allowed to use +, -, *, /, %, sqrt(), and pow().\n"
         << "The pow() syntax is pow(<number>, <exponent>).\n"
         << "When you are finished entering a expression, enter ';' to execute the expression.\n"
         << "To declare a variable type '#' then the variable name and its value"
         << " (Example: \"# x = 5\" for x = 5).\n"
         << "To exit the program type 'exit' then press enter.\n\n";
}
//---------------------------------------------------------------------------------------------------------------
// Main function to run program

int main()

try {
    	greeting();
	calculate();
	return 0;
}
catch (exception& e) {
	cerr << "exception: " << e.what() << endl;
	char c;
	while (cin >> c && c != ';');
	return 1;
}
catch (...) {
	cerr << "exception\n";
	char c;
	while (cin >> c && c != ';');
	return 2;
}
